#!/usr/bin/perl -w
use strict;
use Getopt::Long;
use POSIX 'strftime';
use Time::Local 'timegm';
Getopt::Long::Configure('bundling');

sub usage() {
    die <<EOT
Usage: sonox [OPTIONS]

If no OPTIONS, defaults to --since.

  -h, --help        This text.
  -N, --northern    Assume Northern hemisphere rather than Southern. (default)
  -S, --southern    Assume Southern hemisphere rather than Northern.
  -s, --since       Show number of days since last solstice or equinox.
  -u, --until       Show number of days until next solstice or equinox.
  -l, --last[=N]*   Show last N solstices and equinoxes.
  -n, --next[=N]*   Show next N solstices and equinoxes.
  -y, --year[=Y]**  Show all 4 solstices and equinoxes for the year Y.

* N defaults to 1.

** Y defaults to the current year.

Northern hemisphere is the default unless the SONOX_SOUTHERN environment
variable is set to 1.
EOT
}

my %type = (
    2  => 'Vernal',
    5  => 'Summer',
    8  => 'Autumnal',
    11 => 'Winter',
);

my ( $help, $northern, $southern, $since, $until, $last, $next, $year );

$southern = $ENV{SONOX_SOUTHERN};

usage unless GetOptions(
    'help|h'     => \$help,
    'southern|S' => \$southern,
    'northern|N' => \$northern,
    'since|s'    => \$since,
    'until|u'    => \$until,
    'last|l:i'   => \$last,
    'next|n:i'   => \$next,
    'year|y:i'   => \$year,
);

usage if $help;

my $now = time;

$southern = 0 if $northern;

for ( \$last, \$next ) {
    $$_ = 1 if defined $$_ and 0 == $$_;
}

$year = 1900 + (localtime $now)[5] if defined $year and 0 == $year;

# Default to --since.
$since |= not ( $until or $last or $next or $year );

if ( $since or $last or $until or $next ) {
    my ( $before, $after ) = partition($now);
    if ($#$after == -1) {
      warn "WARNING: Database has no events after today.  Result may be incorrect.\n";
    }
    if ( $last or $next ) {
        my @events = $last ? @$before[-$last .. -1]
                           : @$after[0 .. $next-1];
        print_event( $_ ) for @events;
    }
    print_offset( $now, $before->[-1] ) if $since;
    print_offset( $now, $after->[0] )   if $until;
}

if ($year) {
    print_event( make_event($_) ) for grep /^$year-/, <DATA>;
}

sub print_offset {
    my ( $now, $event ) = @_;

    printf "%s %+d\n", $event->{type}, ($now - $event->{when})/86_400;
}

sub print_event {
    my ( $event ) = @_;

    print strftime("$event->{type}: %F %H%M%z (%a)\n", localtime $event->{when});
}

# Given a point in time, T, return two listrefs: the list of events before (and
# possibly including) T, and the list of events after T.
sub partition {
    my ($now) = @_;
    my ( $before, $after ) = ( [], [] );
    EVENT: while (<DATA>) {
        my $e = make_event($_);
        if ( @$after or $e->{when} > $now ) {
            push @$after, $e;
        } else {
            push @$before, $e;
        }
    }

    return ( $before, $after );
}

# Given a point an ISO8601 time, return a hash representing that event.
sub make_event {
    my ($iso8601) = @_;
    my %event;

    my @when = $iso8601 =~ /(\d+)-(\d+)-(\d+)T(\d+):(\d+)Z/;
    $when[1]--;
    $event{when} = timegm 0, reverse @when;
    $event{type} = type($when[1]);

    return { %event };
}

sub type {
    my ($month) = @_;

    $month += 6 if $southern;
    $month %= 12;

    return $type{$month};
}

# Below here, ISO8601 times for solstices and equinoxes for 2000-2020, in time
# order, pulled from http://aa.usno.navy.mil/data/docs/EarthSeasons.php
# Data for 2021-2025 pulled from https://www.weather.gov/media/ind/seasons.pdf
# since the USNO site appears to be down for "modernization"
__DATA__
2000-03-20T07:35Z
2000-06-21T01:48Z
2000-09-22T17:27Z
2000-12-21T13:37Z
2001-03-20T13:31Z
2001-06-21T07:38Z
2001-09-22T23:04Z
2001-12-21T19:21Z
2002-03-20T19:16Z
2002-06-21T13:24Z
2002-09-23T04:55Z
2002-12-22T01:14Z
2003-03-21T01:00Z
2003-06-21T19:10Z
2003-09-23T10:47Z
2003-12-22T07:04Z
2004-03-20T06:49Z
2004-06-21T00:57Z
2004-09-22T16:30Z
2004-12-21T12:42Z
2005-03-20T12:33Z
2005-06-21T06:46Z
2005-09-22T22:23Z
2005-12-21T18:35Z
2006-03-20T18:26Z
2006-06-21T12:26Z
2006-09-23T04:03Z
2006-12-22T00:22Z
2007-03-21T00:07Z
2007-06-21T18:06Z
2007-09-23T09:51Z
2007-12-22T06:08Z
2008-03-20T05:48Z
2008-06-20T23:59Z
2008-09-22T15:44Z
2008-12-21T12:04Z
2009-03-20T11:44Z
2009-06-21T05:45Z
2009-09-22T21:18Z
2009-12-21T17:47Z
2010-03-20T17:32Z
2010-06-21T11:28Z
2010-09-23T03:09Z
2010-12-21T23:38Z
2011-03-20T23:21Z
2011-06-21T17:16Z
2011-09-23T09:04Z
2011-12-22T05:30Z
2012-03-20T05:14Z
2012-06-20T23:09Z
2012-09-22T14:49Z
2012-12-21T11:11Z
2013-03-20T11:02Z
2013-06-21T05:04Z
2013-09-22T20:44Z
2013-12-21T17:11Z
2014-03-20T16:57Z
2014-06-21T10:51Z
2014-09-23T02:29Z
2014-12-21T23:03Z
2015-03-20T22:45Z
2015-06-21T16:38Z
2015-09-23T08:20Z
2015-12-22T04:48Z
2016-03-20T04:30Z
2016-06-20T22:34Z
2016-09-22T14:21Z
2016-12-21T10:44Z
2017-03-20T10:28Z
2017-06-21T04:24Z
2017-09-22T20:02Z
2017-12-21T16:28Z
2018-03-20T16:15Z
2018-06-21T10:07Z
2018-09-23T01:54Z
2018-12-21T22:22Z
2019-03-20T21:58Z
2019-06-21T15:54Z
2019-09-23T07:50Z
2019-12-22T04:19Z
2020-03-20T03:49Z
2020-06-20T21:43Z
2020-09-22T13:30Z
2020-12-21T10:02Z
2021-03-20T09:37Z
2021-06-21T03:32Z
2021-09-22T19:21Z
2021-12-21T15:59Z
2022-03-20T15:33Z
2022-06-21T09:14Z
2022-09-23T01:04Z
2022-12-21T21:48Z
2023-03-20T21:24Z
2023-06-21T14:58Z
2023-09-23T06:50Z
2023-12-22T03:27Z
2024-03-20T03:06Z
2024-06-20T20:51Z
2024-09-22T12:44Z
2024-12-21T09:21Z
2025-03-20T09:01Z
2025-06-21T02:42Z
2025-09-22T18:19Z
2025-12-21T15:03Z
